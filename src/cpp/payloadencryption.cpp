#include <iostream>
#include <Windows.h>
#include <string>

unsigned char Data_RawData[] = {
	0xFC, 0x48, 0x83, 0xE4, 0xF0, 0xE8, 0xC0, 0x00, 0x00, 0x00, 0x41, 0x51,
	0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xD2, 0x65, 0x48, 0x8B, 0x52,
	0x60, 0x48, 0x8B, 0x52, 0x18, 0x48, 0x8B, 0x52, 0x20, 0x48, 0x8B, 0x72,
	0x50, 0x48, 0x0F, 0xB7, 0x4A, 0x4A, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0x41, 0xC1, 0xC9, 0x0D, 0x41,
	0x01, 0xC1, 0xE2, 0xED, 0x52, 0x41, 0x51, 0x48, 0x8B, 0x52, 0x20, 0x8B,
	0x42, 0x3C, 0x48, 0x01, 0xD0, 0x8B, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
	0x85, 0xC0, 0x74, 0x67, 0x48, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x44,
	0x8B, 0x40, 0x20, 0x49, 0x01, 0xD0, 0xE3, 0x56, 0x48, 0xFF, 0xC9, 0x41,
	0x8B, 0x34, 0x88, 0x48, 0x01, 0xD6, 0x4D, 0x31, 0xC9, 0x48, 0x31, 0xC0,
	0xAC, 0x41, 0xC1, 0xC9, 0x0D, 0x41, 0x01, 0xC1, 0x38, 0xE0, 0x75, 0xF1,
	0x4C, 0x03, 0x4C, 0x24, 0x08, 0x45, 0x39, 0xD1, 0x75, 0xD8, 0x58, 0x44,
	0x8B, 0x40, 0x24, 0x49, 0x01, 0xD0, 0x66, 0x41, 0x8B, 0x0C, 0x48, 0x44,
	0x8B, 0x40, 0x1C, 0x49, 0x01, 0xD0, 0x41, 0x8B, 0x04, 0x88, 0x48, 0x01,
	0xD0, 0x41, 0x58, 0x41, 0x58, 0x5E, 0x59, 0x5A, 0x41, 0x58, 0x41, 0x59,
	0x41, 0x5A, 0x48, 0x83, 0xEC, 0x20, 0x41, 0x52, 0xFF, 0xE0, 0x58, 0x41,
	0x59, 0x5A, 0x48, 0x8B, 0x12, 0xE9, 0x57, 0xFF, 0xFF, 0xFF, 0x5D, 0x48,
	0xBA, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x8D,
	0x01, 0x01, 0x00, 0x00, 0x41, 0xBA, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5,
	0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x41, 0xBA, 0xA6, 0x95, 0xBD, 0x9D, 0xFF,
	0xD5, 0x48, 0x83, 0xC4, 0x28, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0,
	0x75, 0x05, 0xBB, 0x47, 0x13, 0x72, 0x6F, 0x6A, 0x00, 0x59, 0x41, 0x89,
	0xDA, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x00
};

using namespace std;

string xorencrypt(string data, string key) {
  string output = data;
  for (int i = 0; i < data.size(); i++) {
    output[i] = data[i] ^ key[i % key.size()];
  }
  return output;
}

string xordecrypt(string data, string key) {
  return xorencrypt(data, key);
}

void xorpayloadencryption(){
  string key = "password";
  
  string encrypted = xorencrypt(string((char*)Data_RawData, sizeof(Data_RawData)), key);
  cout << "[i] Encrypted size: " << encrypted.size() << endl;
  cout << "[i] Encrypted: " << encrypted << endl;

  string decrypted = xordecrypt(encrypted, key);
  cout << "[i] Decrypted size: " << decrypted.size() << endl;
  cout << "[i] Decrypted: " << decrypted << endl;

  cout << "[i] Press any key to continue..." << endl;
  cin.get();
}

class Rc4Context {
  public:
    string s, key;
    int slen, x, y; // x, y are the indexes of the s array

    Rc4Context(string key) {
      x = 0;
      y = 0;
      s = string(256, 0);
      slen = 256;
      key = key;
      for (int i = 0; i < 256; i++) {
        s[i] = i;
      }
      for(int i=0, j=0; i < 256; i++) {
        j = (j + s[i] + key[i % key.size()]) % 256;
        swap(s[i], s[j]);
      }
    }

    void rc4cipher(string input, string output, int size) {
      if(input.length() == 0 || output.length() == 0 || size == 0) {
        return;
      }
      char temp;
      for (int i = 0; i < size/2; i++) {
        x = (x + 1) % 256;
        y = (s[x] + y) % 256;
        swap(s[x], s[y]);
        temp = s[(s[x] + s[y]) % 256];
        output[i] = input[i] ^ temp;
      }
    }

    string encrypt(string plaintext) {
      string ciphertext = string(plaintext.length(), 0);
      rc4cipher(plaintext, ciphertext, plaintext.length());
      return ciphertext;
    }

    string decrypt(string ciphertext) {
      return encrypt(ciphertext);
    }
};

void rc4payloadencryption() {
  string key = "maldevbabe"; // ofcourse this key needs to be obfuscated
  Rc4Context rc4(key);

  string encrypted = rc4.encrypt(string((char*)Data_RawData, sizeof(Data_RawData)));
  cout << "[i] Encrypted size: " << encrypted.size() << endl;
  cout << "[i] Encrypted: " << encrypted << endl;
  
  string decrypted = rc4.decrypt(encrypted);
  cout << "[i] Decrypted size: " << decrypted.size() << endl;
  cout << "[i] Decrypted: " << decrypted << endl;

  cout << "[i] Press any key to continue..." << endl;
  cin.get();
}

class AESContext {
  public:
    string key, plaintext, ciphertext, iv;
    AESContext(string key, string plaintext, string iv) {
      key = key;
      plaintext = plaintext;
      iv = iv;
    }

    boolean encrypt() {
      
      return true;
    }

    string encrypt(string plaintext) {
      return plaintext;
    }

    string decrypt(string ciphertext) {
      return ciphertext;
    }
};

void aespayloadencryption(){

}